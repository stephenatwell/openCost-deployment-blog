
version: v1
kind: kubernetes
application: OpenCost + Prometheus # The name of the application to deploy.
targets:
    #where to deploy code, and in what order. Specifies accounts and namespaces for each application.
    production: 
        account: demo-prod-west-cluster
        namespace: opencost
        strategy: opencost
        constraints:
          dependsOn: ["prometheus-production"]
    prometheus-production: 
        account: demo-prod-west-cluster
        namespace: prometheus
        strategy: prometheus

# Specifies which Kubernetes manifests should be deployed to targets.
manifests:
    - path: manifests.yml
strategies: # How the code will be deployed.
  opencost:
    # strategy to use when deploying opencost. This deploys opencost, waits for a scrape interval, then confirms cost data is reaching prometheus. 
    # This simple test attempts to validate openCost is working following an upgrade.
    canary: 
        # List of canary steps
        steps:
          # The map key is the step type
          - setWeight:
              weight: 100
          - pause:  # lets make sure some scrapes have run...
              duration: 20
              unit: seconds
          - analysis: # optional: check some monitoring queries to ensure applicaiton appears healthy. Rollback if they fail.
              interval: 5
              units: seconds
              numberOfJudgmentRuns: 1
              rollBackMode: manual
              queries: # ensure kubecost cost data is queriable within prometheus
              - node_cpu_hourly_cost
              - node_ram_hourly_cost
              - node_total_hourly_cost
  prometheus:
    # strategy to use when deploying prometheus. It tests that the prometheus-only part of the openCost example queries is working, so that if something affecting openCost breaks during a prometheus upgrade it can be detected.
    canary: 
        steps:
          - setWeight:
              weight: 100
          - pause: # lets make sure some scrapes have run...
              duration: 20
              unit: seconds
          - analysis: # optional: check some monitoring queires to ensure application appears healthy. Rollback if they fail.
              interval: 60
              units: seconds
              numberOfJudgmentRuns: 1
              rollBackMode: manual
              queries: # ensure the portion of the example kubecost queries that prometheus natively provides are working...
              - memory_allocation_gb  
  rolling:
    canary:
      steps: 
      - setWeight:
          weight: 100

analysis:  # Canary analysis queries and thresholds
  defaultMetricProviderName: Kubecost-Prometheus
  queries:
    - name: memory_allocation_gb
      lowerLimit: 0
      queryTemplate:
        sum(avg_over_time(container_memory_allocation_bytes{}[{{armory.promQlStepInterval}}]))/1024/1024/1024
    - name: node_total_hourly_cost
      lowerLimit: 0
      queryTemplate: >-
        sum (node_total_hourly_cost * 730)   
    - name: node_ram_hourly_cost
      lowerLimit: 0
      queryTemplate: >-
        sum (node_ram_hourly_cost * 730)
    - name: node_cpu_hourly_cost
      lowerLimit: 0
      queryTemplate: >-
        sum (node_cpu_hourly_cost * 730)
